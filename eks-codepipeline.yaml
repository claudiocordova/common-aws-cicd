AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "Claudio Cordova"
Description: ""
Resources:

    S3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "codepipeline-${AWS::Region}-${AWS::AccountId}"
            BucketEncryption: 
                ServerSideEncryptionConfiguration: 
                  - 
                    ServerSideEncryptionByDefault: 
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false


    S3CustomResource:
      Type: Custom::S3CustomResource
      Properties:
        ServiceToken: !GetAtt AWSLambdaFunction.Arn
        bucket_name: !Ref S3Bucket    

    AWSLambdaFunction:
        Type: AWS::Lambda::Function
        Properties:
          Description: "Empty an S3 bucket!"
          FunctionName: !Sub 'delete-files-S3-${AWS::StackName}-${AWS::Region}-lambda'
          Handler: index.handler
          Role: !GetAtt AWSLambdaExecutionRole.Arn
          Timeout: 360
          Runtime: python3.8
          Code:
            ZipFile: |
                import boto3
                import cfnresponse
                ### cfnresponse module help in sending responses to CloudFormation
                ### instead of writing your own code

                def handler(event, context):
                    # Get request type
                    the_event = event['RequestType']        
                    print("The event is: ", str(the_event))

                    response_data = {}
                    s3 = boto3.client('s3')

                    # Retrieve parameters (bucket name)
                    bucket_name = event['ResourceProperties']['bucket_name']
                    
                    try:
                        if the_event == 'Delete':
                            print("Deleting S3 content...")
                            b_operator = boto3.resource('s3')
                            b_operator.Bucket(str(bucket_name)).objects.all().delete()

                        # Everything OK... send the signal back
                        print("Execution succesfull!")
                        cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
                    except Exception as e:
                        print("Execution failed...")
                        print(str(e))
                        response_data['Data'] = str(e)
                        cfnresponse.send(event, context, cfnresponse.FAILED, response_data)

    AWSLambdaExecutionRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Statement:
            - Action:
              - sts:AssumeRole
              Effect: Allow
              Principal:
                Service:
                - lambda.amazonaws.com
            Version: '2012-10-17'
          Path: "/"
          Policies:
            - PolicyName: !Sub ${AWS::StackName}-${AWS::Region}-AWSLambda-CW
              PolicyDocument:
                Version: '2012-10-17' 
                Statement:
                  - Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    Effect: Allow
                    Resource: arn:aws:logs:*:*:*
            - PolicyName: !Sub ${AWS::StackName}-${AWS::Region}-AWSLambda-S3
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Action:
                    - s3:PutObject
                    - s3:DeleteObject
                    - s3:List*
                    Effect: Allow
                    Resource:
                      - !Sub arn:aws:s3:::${S3Bucket}
                      - !Sub arn:aws:s3:::${S3Bucket}/*
          RoleName: !Sub ${AWS::StackName}-${AWS::Region}-AWSLambdaExecutionRole                    

    CodePipelinePipeline:
        Type: "AWS::CodePipeline::Pipeline"
        #DependsOn: S3Bucket
        Properties:
            Name: "poker-analyzer-service-codepipeline"
            RoleArn: !GetAtt IAMRole.Arn 
            ArtifactStore: 
                Location: !Ref S3Bucket
                Type: "S3"
            Stages: 
              - 
                Name: "Source"
                Actions: 
                  - 
                    Name: "Source"
                    ActionTypeId: 
                        Category: "Source"
                        Owner: "AWS"
                        Provider: "CodeStarSourceConnection"
                        Version: "1"
                    Configuration: 
                        BranchName: "main"
                        #ConnectionArn: !Sub "arn:aws:codestar-connections:${AWS::Region}:${AWS::AccountId}:connection/d9b9f3a7-da39-4b30-ac7a-bb38d27f71c1"
                        ConnectionArn: !Sub "arn:aws:codestar-connections:us-east-1:361494667617:connection/d9b9f3a7-da39-4b30-ac7a-bb38d27f71c1"
                        FullRepositoryId: "claudiocordova/poker-hand-analyzer-microservice-springboot"
                        OutputArtifactFormat: "CODE_ZIP"
                    OutputArtifacts: 
                      - 
                        Name: "SourceArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "SourceVariables"
                    RunOrder: 1
              - 
                Name: "Build"
                Actions: 
                  - 
                    Name: "Build"
                    ActionTypeId: 
                        Category: "Build"
                        Owner: "AWS"
                        Provider: "CodeBuild"
                        Version: "1"
                    Configuration: 
                        ProjectName: "poker-analyzer-service-codebuild"
                    InputArtifacts: 
                      - 
                        Name: "SourceArtifact"
                    OutputArtifacts: 
                      - 
                        Name: "BuildArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "BuildVariables"
                    RunOrder: 1
             
    IAMRole:
        Type: "AWS::IAM::Role"
        #DependsOn: IAMManagedPolicy
        Properties:
            Path: "/service-role/"
            RoleName: !Sub "AWSCodePipelineServiceRole-${AWS::Region}-poker-hand-service"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codepipeline.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              #- !Sub "arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSCodePipelineServiceRole-${AWS::Region}-poker-hand-service-policy"
              - !Ref IAMManagedPolicy
    IAMManagedPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "AWSCodePipelineServiceRole-${AWS::Region}-poker-hand-service-policy"
            Path: "/service-role/"
            PolicyDocument: |
                {
                    "Statement": [
                        {
                            "Action": [
                                "iam:PassRole"
                            ],
                            "Resource": "*",
                            "Effect": "Allow",
                            "Condition": {
                                "StringEqualsIfExists": {
                                    "iam:PassedToService": [
                                        "cloudformation.amazonaws.com",
                                        "elasticbeanstalk.amazonaws.com",
                                        "ec2.amazonaws.com",
                                        "ecs-tasks.amazonaws.com"
                                    ]
                                }
                            }
                        },
                        {
                            "Action": [
                                "codecommit:CancelUploadArchive",
                                "codecommit:GetBranch",
                                "codecommit:GetCommit",
                                "codecommit:GetRepository",
                                "codecommit:GetUploadArchiveStatus",
                                "codecommit:UploadArchive"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "codedeploy:CreateDeployment",
                                "codedeploy:GetApplication",
                                "codedeploy:GetApplicationRevision",
                                "codedeploy:GetDeployment",
                                "codedeploy:GetDeploymentConfig",
                                "codedeploy:RegisterApplicationRevision"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "codestar-connections:UseConnection"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "elasticbeanstalk:*",
                                "ec2:*",
                                "elasticloadbalancing:*",
                                "autoscaling:*",
                                "cloudwatch:*",
                                "s3:*",
                                "sns:*",
                                "cloudformation:*",
                                "rds:*",
                                "sqs:*",
                                "ecs:*"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "lambda:InvokeFunction",
                                "lambda:ListFunctions"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "opsworks:CreateDeployment",
                                "opsworks:DescribeApps",
                                "opsworks:DescribeCommands",
                                "opsworks:DescribeDeployments",
                                "opsworks:DescribeInstances",
                                "opsworks:DescribeStacks",
                                "opsworks:UpdateApp",
                                "opsworks:UpdateStack"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "cloudformation:CreateStack",
                                "cloudformation:DeleteStack",
                                "cloudformation:DescribeStacks",
                                "cloudformation:UpdateStack",
                                "cloudformation:CreateChangeSet",
                                "cloudformation:DeleteChangeSet",
                                "cloudformation:DescribeChangeSet",
                                "cloudformation:ExecuteChangeSet",
                                "cloudformation:SetStackPolicy",
                                "cloudformation:ValidateTemplate"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "codebuild:BatchGetBuilds",
                                "codebuild:StartBuild",
                                "codebuild:BatchGetBuildBatches",
                                "codebuild:StartBuildBatch"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "devicefarm:ListProjects",
                                "devicefarm:ListDevicePools",
                                "devicefarm:GetRun",
                                "devicefarm:GetUpload",
                                "devicefarm:CreateUpload",
                                "devicefarm:ScheduleRun"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "servicecatalog:ListProvisioningArtifacts",
                                "servicecatalog:CreateProvisioningArtifact",
                                "servicecatalog:DescribeProvisioningArtifact",
                                "servicecatalog:DeleteProvisioningArtifact",
                                "servicecatalog:UpdateProduct"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "cloudformation:ValidateTemplate"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ecr:DescribeImages"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "states:DescribeExecution",
                                "states:DescribeStateMachine",
                                "states:StartExecution"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "appconfig:StartDeployment",
                                "appconfig:StopDeployment",
                                "appconfig:GetDeployment"
                            ],
                            "Resource": "*"
                        }
                    ],
                    "Version": "2012-10-17"
                }




